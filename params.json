{"name":"Crcdocker","tagline":"Python Scripts for Image Analysis, Classification and Change Detection in Remote Sensing","body":"CRCDocker\r\n=========\r\nSource files for the Docker image mort/crcdocker\r\n\r\nCommand line versions of several Python scripts for the textbook \"Image Analysis, Classification and Change Detection in Remote Sensing\"\r\n\r\nOn Ubuntu, for example, pull and run the container with\r\n\r\nsudo docker run -d -p 433:8888 -v my_images:/crc/imagery/ â€“name=crc mort/crcdocker\r\n\r\nThis maps the host directory my_images to the container directory /crc/imagery/ and runs the\r\ncontainer as a daemon which is serving iPython notebooks. \r\n\r\nPoint your browser to http://localhost:433 to see the iPython notebook home page. \r\n\r\nOpen a new notebook and get help with\r\n\r\nrun dispms.py -h (Display multispectral images - Chapter 1)\r\n\r\nrun iMad.py -h  (IR-MAD algorithm for change detection - Chapter 9)\r\n\r\nrun radcal.py -h (Automatic relative radiometric normalization -Chapter 9)\r\n\r\nrun em.py -h (Gaussian mixture clustering with the expectation maximization algorithm -Chapter 8)\r\n\r\nrun register.py -h (Image-image co-registration in the spatial frequency domain - Chapter 5)\r\n\r\nrun atwt.py -h (A-trous wavelet transform image fusion - Chapter 5)\r\n\r\nrun dwt.py -h (Discrete wavelet transform image fusion -Chapter 5)\r\n\r\nTo carry out automatic radiometric normalization of full scenes (e.g. Landsat TM) run the bash script normalize:\r\n\r\nUsage:\r\n\r\nrun ./normalize warpbandnumber spectral_subset referencefile targetfile [spatial_subset]\r\n\r\nOnly the spatial subset is optional.\r\n\r\nSpectral and spatial subsets must be lists, e.g., for Landsat images:\r\n\r\n!./ normalize 4 [1,2,3,4,5,7] reference.tif target.tif [500,500,2000,2000]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}